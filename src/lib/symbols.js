import { Mode } from 'src/state/app';

export function createCellId(rowIndex, colIndex) {
  return `${rowIndex}_${colIndex}`;
}

const hiragana = [
  'あ',
  'い',
  'う',
  'え',
  'お',
  'か',
  'き',
  'く',
  'け',
  'こ',
  'さ',
  'し',
  'す',
  'せ',
  'そ',
  'た',
  'ち',
  'っ',
  'て',
  'と',
  'な',
  'に',
  'ぬ',
  'ね',
  'の',
  'は',
  'ひ',
  'ふ',
  'へ',
  'ほ',
  'ま',
  'み',
  'む',
  'め',
  'も',
  'や',
  'ゆ',
  'よ',
  'ら',
  'り',
  'る',
  'れ',
  'ろ',
  'わ',
  'を',
  'ん',
];

const hiraganaSolution = {
  '0_0': 'わ',
  '0_1': 'ら',
  '0_2': 'や',
  '0_3': 'ま',
  '0_4': 'は',
  '0_5': 'な',
  '0_6': 'た',
  '0_7': 'さ',
  '0_8': 'か',
  '0_9': 'あ',
  '1_1': 'り',
  '1_3': 'み',
  '1_4': 'ひ',
  '1_5': 'に',
  '1_6': 'ち',
  '1_7': 'し',
  '1_8': 'き',
  '1_9': 'い',
  '2_0': 'を',
  '2_1': 'る',
  '2_2': 'ゆ',
  '2_3': 'む',
  '2_4': 'ふ',
  '2_5': 'ぬ',
  '2_6': 'っ',
  '2_7': 'す',
  '2_8': 'く',
  '2_9': 'う',
  '3_1': 'れ',
  '3_3': 'め',
  '3_4': 'へ',
  '3_5': 'ね',
  '3_6': 'て',
  '3_7': 'せ',
  '3_8': 'け',
  '3_9': 'え',
  '4_0': 'ん',
  '4_1': 'ろ',
  '4_2': 'よ',
  '4_3': 'も',
  '4_4': 'ほ',
  '4_5': 'の',
  '4_6': 'と',
  '4_7': 'そ',
  '4_8': 'こ',
  '4_9': 'お',
};

const hiraganaDK = [
  'が',
  'ぎ',
  'ぐ',
  'げ',
  'ご',
  'ざ',
  'じ',
  'ず',
  'ぜ',
  'ぞ',
  'だ',
  'ぢ',
  'づ',
  'で',
  'ど',
  'ば',
  'び',
  'ぶ',
  'べ',
  'ぼ',
  'ぱ',
  'ぴ',
  'ぷ',
  'ぺ',
  'ぽ',
];

const hiraganaDKSolution = {
  '0_0': 'ぱ',
  '0_1': 'ば',
  '0_2': 'だ',
  '0_3': 'ざ',
  '0_4': 'が',
  '1_0': 'ぴ',
  '1_1': 'び',
  '1_2': 'ぢ',
  '1_3': 'じ',
  '1_4': 'ぎ',
  '2_0': 'ぷ',
  '2_1': 'ぶ',
  '2_2': 'づ',
  '2_3': 'ず',
  '2_4': 'ぐ',
  '3_0': 'ぺ',
  '3_1': 'べ',
  '3_2': 'で',
  '3_3': 'ぜ',
  '3_4': 'げ',
  '4_0': 'ぽ',
  '4_1': 'ぼ',
  '4_2': 'ど',
  '4_3': 'ぞ',
  '4_4': 'ご',
};

const hiraganaYoon = [
  'きゃ',
  'きゅ',
  'きょ',
  'ぎゃ',
  'ぎゅ',
  'ぎょ',
  'しゃ',
  'しゅ',
  'しょ',
  'じゃ',
  'じゅ',
  'じょ',
  'ちゃ',
  'ちゅ',
  'ちょ',
  'ぢゃ',
  'ぢゅ',
  'ぢょ',
  'にゃ',
  'にゅ',
  'にょ',
  'びゃ',
  'びゅ',
  'びょ',
  'ひゃ',
  'ひゅ',
  'ひょ',
  'ぴゃ',
  'ぴゅ',
  'ぴょ',
  'みゃ',
  'みゅ',
  'みょ',
  'りゃ',
  'りゅ',
  'りょ',
];

const hiraganaYoonSolution = {
  '0_0': 'みゃ',
  '0_1': 'ひゃ',
  '0_2': 'にゃ',
  '0_3': 'ちゃ',
  '0_4': 'しゃ',
  '0_5': 'きゃ',
  '1_0': 'みゅ',
  '1_1': 'ひゅ',
  '1_2': 'にゅ',
  '1_3': 'ちゅ',
  '1_4': 'しゅ',
  '1_5': 'きゅ',
  '2_0': 'みょ',
  '2_1': 'ひょ',
  '2_2': 'にょ',
  '2_3': 'ちょ',
  '2_4': 'しょ',
  '2_5': 'きょ',
  '3_0': 'りゃ',
  '3_1': 'ぴゃ',
  '3_2': 'びゃ',
  '3_3': 'ぢゃ',
  '3_4': 'じゃ',
  '3_5': 'ぎゃ',
  '4_0': 'りゅ',
  '4_1': 'ぴゅ',
  '4_2': 'びゅ',
  '4_3': 'ぢゅ',
  '4_4': 'じゅ',
  '4_5': 'ぎゅ',
  '5_0': 'りょ',
  '5_1': 'ぴょ',
  '5_2': 'びょ',
  '5_3': 'ぢょ',
  '5_4': 'じょ',
  '5_5': 'ぎょ',
};

const katakana = [
  'ア',
  'イ',
  'ウ',
  'エ',
  'オ',
  'カ',
  'キ',
  'ク',
  'ケ',
  'コ',
  'サ',
  'シ',
  'ス',
  'セ',
  'ソ',
  'タ',
  'チ',
  'ツ',
  'テ',
  'ト',
  'ナ',
  'ニ',
  'ヌ',
  'ネ',
  'ノ',
  'ハ',
  'ヒ',
  'フ',
  'ヘ',
  'ホ',
  'マ',
  'ミ',
  'ム',
  'メ',
  'モ',
  'ヤ',
  'ユ',
  'ヨ',
  'ラ',
  'リ',
  'ル',
  'レ',
  'ロ',
  'ワ',
  'ヲ',
  'ン',
];

const katakanaSolution = {
  '0_0': 'ワ',
  '0_1': 'ラ',
  '0_2': 'ヤ',
  '0_3': 'マ',
  '0_4': 'ハ',
  '0_5': 'ナ',
  '0_6': 'タ',
  '0_7': 'サ',
  '0_8': 'カ',
  '0_9': 'ア',
  '1_1': 'リ',
  '1_3': 'ミ',
  '1_4': 'ヒ',
  '1_5': 'ニ',
  '1_6': 'チ',
  '1_7': 'シ',
  '1_8': 'キ',
  '1_9': 'イ',
  '2_0': 'ヲ',
  '2_1': 'ル',
  '2_2': 'ユ',
  '2_3': 'ム',
  '2_4': 'フ',
  '2_5': 'ヌ',
  '2_6': 'ツ',
  '2_7': 'ス',
  '2_8': 'ク',
  '2_9': 'ウ',
  '3_1': 'レ',
  '3_3': 'メ',
  '3_4': 'ヘ',
  '3_5': 'ネ',
  '3_6': 'テ',
  '3_7': 'セ',
  '3_8': 'ケ',
  '3_9': 'エ',
  '4_0': 'ン',
  '4_1': 'ロ',
  '4_2': 'ヨ',
  '4_3': 'モ',
  '4_4': 'ホ',
  '4_5': 'ノ',
  '4_6': 'ト',
  '4_7': 'ソ',
  '4_8': 'コ',
  '4_9': 'オ',
};

const katakanaDK = [
  'ガ',
  'ギ',
  'グ',
  'ゲ',
  'ゴ',
  'ザ',
  'ジ',
  'ズ',
  'ゼ',
  'ゾ',
  'ダ',
  'ヂ',
  'ヅ',
  'デ',
  'ド',
  'バ',
  'ビ',
  'ブ',
  'ベ',
  'ボ',
  'パ',
  'ピ',
  'プ',
  'ペ',
  'ポ',
];

const katakanaDKSolution = {
  '0_0': 'パ',
  '0_1': 'バ',
  '0_2': 'ダ',
  '0_3': 'ザ',
  '0_4': 'ガ',
  '1_0': 'ピ',
  '1_1': 'ビ',
  '1_2': 'ヂ',
  '1_3': 'ジ',
  '1_4': 'ギ',
  '2_0': 'プ',
  '2_1': 'ブ',
  '2_2': 'ヅ',
  '2_3': 'ズ',
  '2_4': 'グ',
  '3_0': 'ペ',
  '3_1': 'ベ',
  '3_2': 'デ',
  '3_3': 'ゼ',
  '3_4': 'ゲ',
  '4_0': 'ポ',
  '4_1': 'ボ',
  '4_2': 'ド',
  '4_3': 'ゾ',
  '4_4': 'ゴ',
};

const katakanaYoon = [
  'キャ',
  'キュ',
  'キョ',
  'ギャ',
  'ギュ',
  'ギョ',
  'シャ',
  'シュ',
  'ショ',
  'ジャ',
  'ジュ',
  'ジョ',
  'チャ',
  'チュ',
  'チョ',
  'ヂャ',
  'ヂュ',
  'ヂョ',
  'ニャ',
  'ニュ',
  'ニョ',
  'ビャ',
  'ビュ',
  'ビョ',
  'ヒャ',
  'ヒュ',
  'ヒョ',
  'ピャ',
  'ピュ',
  'ピョ',
  'ミャ',
  'ミュ',
  'ミョ',
  'リャ',
  'リュ',
  'リョ',
];

const katakanaYoonSolution = {
  '0_0': 'ミャ',
  '0_1': 'ヒャ',
  '0_2': 'ニャ',
  '0_3': 'チャ',
  '0_4': 'シャ',
  '0_5': 'キャ',
  '1_0': 'ミュ',
  '1_1': 'ヒュ',
  '1_2': 'ニュ',
  '1_3': 'チュ',
  '1_4': 'シュ',
  '1_5': 'キュ',
  '2_0': 'ミョ',
  '2_1': 'ヒョ',
  '2_2': 'ニョ',
  '2_3': 'チョ',
  '2_4': 'ショ',
  '2_5': 'キョ',
  '3_0': 'リャ',
  '3_1': 'ピャ',
  '3_2': 'ビャ',
  '3_3': 'ヂャ',
  '3_4': 'ジャ',
  '3_5': 'ギャ',
  '4_0': 'リュ',
  '4_1': 'ピュ',
  '4_2': 'ビュ',
  '4_3': 'ヂュ',
  '4_4': 'ジュ',
  '4_5': 'ギュ',
  '5_0': 'リョ',
  '5_1': 'ピョ',
  '5_2': 'ビョ',
  '5_3': 'ヂョ',
  '5_4': 'ジョ',
  '5_5': 'ギョ',
};

export function getSolution(mode) {
  switch (mode) {
    case Mode.HIRAGANA: {
      return hiraganaSolution;
    }
    case Mode.HIRAGANA_DK: {
      return hiraganaDKSolution;
    }
    case Mode.HIRAGANA_YOON: {
      return hiraganaYoonSolution;
    }
    case Mode.KATAKANA: {
      return katakanaSolution;
    }
    case Mode.KATAKANA_DK: {
      return katakanaDKSolution;
    }
    case Mode.KATAKANA_YOON: {
      return katakanaYoonSolution;
    }
    default: {
      throw new Error(`Invalid mode: ${mode}`);
    }
  }
}

export function getSymbols(mode) {
  switch (mode) {
    case Mode.HIRAGANA: {
      return hiragana;
    }
    case Mode.HIRAGANA_DK: {
      return hiraganaDK;
    }
    case Mode.HIRAGANA_YOON: {
      return hiraganaYoon;
    }
    case Mode.KATAKANA: {
      return katakana;
    }
    case Mode.KATAKANA_DK: {
      return katakanaDK;
    }
    case Mode.KATAKANA_YOON: {
      return katakanaYoon;
    }
    default: {
      throw new Error(`Invalid mode: ${mode}`);
    }
  }
}

export function getDummyGrid(mode) {
  switch (mode) {
    case Mode.HIRAGANA:
    case Mode.KATAKANA: {
      return [[...Array(5)], [...Array(10)]];
    }
    case Mode.HIRAGANA_DK:
    case Mode.KATAKANA_DK: {
      return [[...Array(5)], [...Array(5)]];
    }
    case Mode.HIRAGANA_YOON:
    case Mode.KATAKANA_YOON: {
      return [[...Array(6)], [...Array(6)]];
    }
    default: {
      throw new Error(`Invalid mode: ${mode}`);
    }
  }
}
